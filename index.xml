<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lenon Oliveira</title>
    <link>https://lenon.dev/</link>
    <description>Recent content on Lenon Oliveira</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright © 2024, Lenon Oliveira.</copyright>
    <lastBuildDate>Sun, 05 Jun 2022 15:00:00 +0000</lastBuildDate>
    <atom:link href="https://lenon.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python code linters and analyzers</title>
      <link>https://lenon.dev/blog/python-code-linters-and-analyzers/</link>
      <pubDate>Sun, 05 Jun 2022 15:00:00 +0000</pubDate>
      <guid>https://lenon.dev/blog/python-code-linters-and-analyzers/</guid>
      <description>&lt;p&gt;Code linters are great for finding errors, bugs, and code smells before they&#xA;reach production. They help keep the code base readable, maintainable, and&#xA;consistent. Some linters are focused only on code style, while others can offer&#xA;more in-depth refactoring suggestions.&lt;/p&gt;&#xA;&lt;p&gt;In this post, I made a small list to compare some of the available code linters&#xA;for Python because a lot has changed since the last time I checked them. I&#xA;included a brief description of the most relevant features of each one of them,&#xA;and at the end of this post, I share what I think makes sense for new Python&#xA;projects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Downloading and caching large files using Python</title>
      <link>https://lenon.dev/blog/downloading-and-caching-large-files-using-python/</link>
      <pubDate>Mon, 24 May 2021 22:00:00 +0000</pubDate>
      <guid>https://lenon.dev/blog/downloading-and-caching-large-files-using-python/</guid>
      <description>&lt;p&gt;While writing a small Python library to download and parse a large CSV file from&#xA;the web, I had to implement a strategy to cache the file locally and avoid&#xA;downloading it on every execution. I wanted the library to download the file&#xA;only once on the first execution and also when it has changed on the server. In&#xA;this blog post I&amp;rsquo;m describing how to implement this with Python, basic HTTP&#xA;headers and file manipulation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to publish a blog on GitHub Pages with Hugo and GitHub Actions</title>
      <link>https://lenon.dev/blog/how-to-publish-a-blog-on-github-pages-with-hugo-and-github-actions/</link>
      <pubDate>Sun, 25 Oct 2020 21:00:00 +0000</pubDate>
      <guid>https://lenon.dev/blog/how-to-publish-a-blog-on-github-pages-with-hugo-and-github-actions/</guid>
      <description>&lt;p&gt;I decided to start a new blog and, after looking at many of the available&#xA;options for blogging, I chose a static site generator. I had used Jekyll in the&#xA;past, but this time I wanted to try something new, so I gave &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; a try.&#xA;I also wanted to publish this blog to GitHub Pages whenever I push new content&#xA;to the GitHub repo. So in this blog post I describe how I&amp;rsquo;m using it along with&#xA;GitHub actions to automatically deploy this blog to GitHub Pages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to List Rails Routes Programmatically</title>
      <link>https://lenon.dev/blog/how-to-list-rails-routes-programmatically/</link>
      <pubDate>Thu, 08 Oct 2020 02:28:29 +0000</pubDate>
      <guid>https://lenon.dev/blog/how-to-list-rails-routes-programmatically/</guid>
      <description>&lt;p&gt;While developing a Rails app you can use the task &lt;code&gt;bin/rails routes&lt;/code&gt; to list the&#xA;available routes and their respective controllers and actions. But in case you&#xA;need to list and manipulate them programmatically, you can use the following&#xA;snippet:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;routes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;routes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;route&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The double &lt;code&gt;.routes&lt;/code&gt; is not a typo as you can see:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;routes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Routing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RouteSet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;routes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;routes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Journey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Routes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is possible to replace the second &lt;code&gt;routes&lt;/code&gt; by &lt;code&gt;set&lt;/code&gt; like this if you prefer:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Résumé/CV</title>
      <link>https://lenon.dev/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lenon.dev/resume/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;Software Engineer with 16+ years of experience designing and developing robust web applications and&#xA;APIs. I&amp;rsquo;m an expert in Ruby on Rails and Python with extensive knowledge of back-end and front-end&#xA;technologies. I have a proven track record of delivering high-quality, scalable solutions across&#xA;diverse business domains. I&amp;rsquo;ve worked with teams in various organizations, from startups to&#xA;enterprise environments. I&amp;rsquo;m committed to engineering excellence, clean code practices, and&#xA;continuous improvement.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
